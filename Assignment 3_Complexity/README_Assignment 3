Fundamentals of Data Structures and Algorithms
Assignment 3


1. A Marbles Game
In a particular board game, there are N spaces in a row, numbered 0 through N - 1 from left to right. There are also N marbles, numbered 0 through N - 1, initially placed in their corresponding spaces. The single player begins by shuffling the marbles into a random order. After that, there are two moves available:

Switch: Switch the marbles in positions 0 and 1, and
Rotate: Move the marble in position 0 to position N - 1, and move all other marbles one space to the left (one index lower).
The objective is to arrange the marbles in order, with each marble i in position i.

a. Write a class, MarblesBoard, to represent the game above. The class should be initialized with a particular sequence of Marbles, listed in the positions from 0 to N - 1.
Next, include switch() and rotate() methods to simulate the player's moves. Write a method, is_solved(), that returns True if the marbles are in the correct order.

Additionally, you may want to write __str__ and __repr__ methods that display the current state of the board. Your class should behave like the following example.
>>> board = MarblesBoard((3,6,7,4,1,0,8,2,5)) 
>>> board 
3 6 7 4 1 0 8 2 5
>>> board.switch() 
>>> board 
6 3 7 4 1 0 8 2 5 
>>> board.rotate() 
>>> board 
3 7 4 1 0 8 2 5 6 
>>> board.switch() 
>>> board 
7 3 4 1 0 8 2 5 6

b. Write a class, Solver, that actually plays the MarblesGame. You class should take a MarblesBoard in its constructor. Write a solve() method that repeatedly calls the switch() and rotate() methods of the given MarblesBoard until the game is solved.  However, you should not call switch when one of the two marbles being switched is 0.  Given this limitation, design your class to solve the game in the smallest possible number of moves. 
 >>> board = MarblesBoard((1,3,0,2))  >>> player = Solver(board)  >>> player.solve()  1 3 0 2 
3 0 2 1 
0 2 1 3 
2 1 3 0 
1 2 3 0 
2 3 0 1 
3 0 1 2 
0 1 2 3 
total steps: 7

In the ‘main’ function of your program you should receive the board input as a command line argument and then construct a MarblesBoard instance from it. Next, you will run the ‘solve’ method for this object. The solve method should print the state of the board after each step and then it should print out the total number of steps, as shown.

>>> python marbles.py 1,3,0,2
1 3 0 2 
3 0 2 1 
0 2 1 3 
2 1 3 0 
1 2 3 0 
2 3 0 1 
3 0 1 2 
0 1 2 3 
total steps: 7

Note that your program must recreate this output exactly.

When you are done, compute the (tightest) Big O running time bound for your script.  Include your answer in the comments of your program.  You may be interested to know that your program is a variation of a well-known sorting algorithm called bubble sort.  Bubble sort would normally be used on a list of items, not on a circular track, but adapting your algorithm to a list would be easy.  Instead of rotating the entire set of marbles, you can imagine a switching car that moves along the track from position to position and can switch adjacent marbles along the way.  It will also be necessary to switch the 0 marble to complete the sort.

